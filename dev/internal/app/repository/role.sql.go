// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: role.sql

package repository

import (
	"context"
)

const CreateRole = `-- name: CreateRole :one
INSERT INTO role (name) VALUES ($1) RETURNING id
`

func (q *Queries) CreateRole(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRow(ctx, CreateRole, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const CreateRoleClient = `-- name: CreateRoleClient :exec
INSERT INTO user_role (id_user, id_role) SELECT $1 AS user_id_params,
unnested_role_id FROM UNNEST($2::int[]) AS unnested_role_id
`

type CreateRoleClientParams struct {
	IDUser  int32   `json:"id_user"`
	Column2 []int32 `json:"column_2"`
}

func (q *Queries) CreateRoleClient(ctx context.Context, arg CreateRoleClientParams) error {
	_, err := q.db.Exec(ctx, CreateRoleClient, arg.IDUser, arg.Column2)
	return err
}

const DeleteRole = `-- name: DeleteRole :exec
DELETE FROM role WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteRole, id)
	return err
}

const GetRole = `-- name: GetRole :one
SELECT id,name FROM role WHERE id = $1
`

type GetRoleRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetRole(ctx context.Context, id int32) (GetRoleRow, error) {
	row := q.db.QueryRow(ctx, GetRole, id)
	var i GetRoleRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const ListRole = `-- name: ListRole :many
SELECT id, name, created_at FROM role
`

func (q *Queries) ListRole(ctx context.Context) ([]Role, error) {
	rows, err := q.db.Query(ctx, ListRole)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateRole = `-- name: UpdateRole :exec
UPDATE role SET name=$2 WHERE id = $1
`

type UpdateRoleParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.Exec(ctx, UpdateRole, arg.ID, arg.Name)
	return err
}

const UpdateRoleClient = `-- name: UpdateRoleClient :exec
DELETE FROM user_role
WHERE id_user = $1
AND id_role NOT IN (SELECT unnested_role_id FROM UNNEST($2::int[]) AS unnested_role_id)
`

type UpdateRoleClientParams struct {
	IDUser  int32   `json:"id_user"`
	Column2 []int32 `json:"column_2"`
}

func (q *Queries) UpdateRoleClient(ctx context.Context, arg UpdateRoleClientParams) error {
	_, err := q.db.Exec(ctx, UpdateRoleClient, arg.IDUser, arg.Column2)
	return err
}

const VerifyRole = `-- name: VerifyRole :many
SELECT DISTINCT id FROM role WHERE id = ANY($1:: int[])
`

func (q *Queries) VerifyRole(ctx context.Context, dollar_1 []int32) ([]int32, error) {
	rows, err := q.db.Query(ctx, VerifyRole, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
