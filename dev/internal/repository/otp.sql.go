// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: otp.sql

package repository

import (
	"context"
)

const CreateOTP = `-- name: CreateOTP :one
INSERT INTO otp_token(code,email) VALUES ($1,$2) RETURNING id, code, email, created_at
`

type CreateOTPParams struct {
	Code  string `json:"code"`
	Email string `json:"email"`
}

func (q *Queries) CreateOTP(ctx context.Context, arg CreateOTPParams) (OtpToken, error) {
	row := q.db.QueryRow(ctx, CreateOTP, arg.Code, arg.Email)
	var i OtpToken
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const DeleteOTP = `-- name: DeleteOTP :exec
DELETE FROM otp_token WHERE email = $1
`

func (q *Queries) DeleteOTP(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, DeleteOTP, email)
	return err
}

const FindOTP = `-- name: FindOTP :one
SELECT COUNT(*) FROM otp_token WHERE code = $1 LIMIT 1
`

func (q *Queries) FindOTP(ctx context.Context, code string) (int64, error) {
	row := q.db.QueryRow(ctx, FindOTP, code)
	var count int64
	err := row.Scan(&count)
	return count, err
}
