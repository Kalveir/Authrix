// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package repository

import (
	"context"
)

const CreateUser = `-- name: CreateUser :exec
WITH new_user AS(
	INSERT INTO user_account(name,email,password) VALUES ($1,$2,$3) RETURNING id
	)
INSERT INTO user_profile (user_id) SELECT id FROM new_user
`

type CreateUserParams struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, CreateUser, arg.Name, arg.Email, arg.Password)
	return err
}

const FindEmail = `-- name: FindEmail :one
SELECT id,email,password FROM user_account WHERE email = $1 LIMIT 1
`

type FindEmailRow struct {
	ID       int32  `json:"id"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) FindEmail(ctx context.Context, email string) (FindEmailRow, error) {
	row := q.db.QueryRow(ctx, FindEmail, email)
	var i FindEmailRow
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const GetUser = `-- name: GetUser :one
SELECT user_account.id, user_account.name, user_account.email, user_account.password, user_account.created_at, user_profile.id, user_profile.user_id, user_profile.age, user_profile.phone, user_profile.district, user_profile.city, user_profile.country, user_profile.created_at
FROM "public".user_account
INNER JOIN "public".user_profile ON (user_account.id = user_profile.user_id) WHERE user_account.id = $1 LIMIT 1
`

type GetUserRow struct {
	UserAccount UserAccount `json:"user_account"`
	UserProfile UserProfile `json:"user_profile"`
}

func (q *Queries) GetUser(ctx context.Context, id int32) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, GetUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.UserAccount.ID,
		&i.UserAccount.Name,
		&i.UserAccount.Email,
		&i.UserAccount.Password,
		&i.UserAccount.CreatedAt,
		&i.UserProfile.ID,
		&i.UserProfile.UserID,
		&i.UserProfile.Age,
		&i.UserProfile.Phone,
		&i.UserProfile.District,
		&i.UserProfile.City,
		&i.UserProfile.Country,
		&i.UserProfile.CreatedAt,
	)
	return i, err
}

const UpdatePassword = `-- name: UpdatePassword :exec
UPDATE user_account SET password=$2 WHERE email=$1
`

type UpdatePasswordParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, UpdatePassword, arg.Email, arg.Password)
	return err
}

const UpdateUser = `-- name: UpdateUser :exec
BEGIN
`

func (q *Queries) UpdateUser(ctx context.Context) error {
	_, err := q.db.Exec(ctx, UpdateUser)
	return err
}
