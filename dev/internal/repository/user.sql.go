// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package repository

import (
	"context"
)

const CreateUser = `-- name: CreateUser :exec
INSERT INTO user_account(name,email,password) VALUES ($1,$2,$3)
`

type CreateUserParams struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, CreateUser, arg.Name, arg.Email, arg.Password)
	return err
}

const FindEmail = `-- name: FindEmail :one
SELECT id,email FROM user_account WHERE email = $1 LIMIT 1
`

type FindEmailRow struct {
	ID    int32  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) FindEmail(ctx context.Context, email string) (FindEmailRow, error) {
	row := q.db.QueryRow(ctx, FindEmail, email)
	var i FindEmailRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const LoginUser = `-- name: LoginUser :one
SELECT id,email FROM user_account WHERE email = $1 AND password = $2 LIMIT 1
`

type LoginUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type LoginUserRow struct {
	ID    int32  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) LoginUser(ctx context.Context, arg LoginUserParams) (LoginUserRow, error) {
	row := q.db.QueryRow(ctx, LoginUser, arg.Email, arg.Password)
	var i LoginUserRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const UpdatePassword = `-- name: UpdatePassword :exec
UPDATE user_account SET password=$2 WHERE email=$1
`

type UpdatePasswordParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, UpdatePassword, arg.Email, arg.Password)
	return err
}

const UpdateUser = `-- name: UpdateUser :one
UPDATE user_account SET name=$2, email=$3, password=$4 WHERE id = $1 RETURNING id, name, email, password, created_at
`

type UpdateUserParams struct {
	ID       int32  `json:"id"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UserAccount, error) {
	row := q.db.QueryRow(ctx, UpdateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i UserAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}
