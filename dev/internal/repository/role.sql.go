// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: role.sql

package repository

import (
	"context"
)

const CreateRole = `-- name: CreateRole :one
INSERT INTO role (name) VALUES ($1) RETURNING id
`

func (q *Queries) CreateRole(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRow(ctx, CreateRole, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const DeleteRole = `-- name: DeleteRole :exec
DELETE FROM role WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteRole, id)
	return err
}

const GetRole = `-- name: GetRole :one
SELECT id,name FROM role WHERE id = $1
`

type GetRoleRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetRole(ctx context.Context, id int32) (GetRoleRow, error) {
	row := q.db.QueryRow(ctx, GetRole, id)
	var i GetRoleRow
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const ListRole = `-- name: ListRole :many
SELECT id, name, created_at FROM role
`

func (q *Queries) ListRole(ctx context.Context) ([]Role, error) {
	rows, err := q.db.Query(ctx, ListRole)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateRole = `-- name: UpdateRole :exec
UPDATE role SET name=$2 WHERE id = $1
`

type UpdateRoleParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.Exec(ctx, UpdateRole, arg.ID, arg.Name)
	return err
}
